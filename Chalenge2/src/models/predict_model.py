# src/models/predict_model.py

import pandas as pd
import numpy as np
import joblib
import os
import sys

# --- ƒê·ªãnh nghƒ©a ƒë∆∞·ªùng d·∫´n ---
try:
    PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
except NameError:
    PROJECT_ROOT = os.path.abspath(os.path.join('.', '..', '..'))
    if not os.path.exists(os.path.join(PROJECT_ROOT, 'src', 'models')):
        PROJECT_ROOT = os.path.abspath('.')

RAW_DATA_DIR = os.path.join(PROJECT_ROOT, "data", "01_raw")
PROCESSED_DATA_DIR = os.path.join(PROJECT_ROOT, "data", "03_processed")
MODELS_DIR = os.path.join(PROJECT_ROOT, "models")

TRAIN_CLEAN_PATH = os.path.join(PROCESSED_DATA_DIR, "train_clean.csv") # C·∫ßn ƒë·ªÉ l·∫•y c·ªôt
TEST_CLEAN_PATH = os.path.join(PROCESSED_DATA_DIR, "test_clean.csv")
TEST_RAW_PATH = os.path.join(RAW_DATA_DIR, "test.csv") # C·∫ßn ƒë·ªÉ l·∫•y Id g·ªëc
MODEL_PATH = os.path.join(MODELS_DIR, "xgboost_v1.pkl") # M√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán
SUBMISSION_PATH = os.path.join(PROJECT_ROOT, "submission.csv") # File output

def make_predictions(model_path, train_clean_path, test_clean_path, test_raw_path, submission_path):
    """
    T·∫£i m√¥ h√¨nh, d·ªØ li·ªáu test, t·∫°o d·ª± ƒëo√°n v√† l∆∞u file submission.
    """
    print("B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫°o d·ª± ƒëo√°n...")

    # 1. T·∫£i m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán
    print(f" ƒêang t·∫£i m√¥ h√¨nh t·ª´: {model_path}")
    try:
        model = joblib.load(model_path)
    except FileNotFoundError:
        print(f"L·ªói: Kh√¥ng t√¨m th·∫•y file m√¥ h√¨nh {model_path}")
        print(f"   H√£y ch·∫Øc ch·∫Øn b·∫°n ƒë√£ ch·∫°y script hu·∫•n luy·ªán tr∆∞·ªõc.")
        sys.exit(1)
    except Exception as e:
        print(f"L·ªói khi t·∫£i m√¥ h√¨nh: {e}")
        sys.exit(1)

    # 2. T·∫£i d·ªØ li·ªáu train s·∫°ch (ch·ªâ ƒë·ªÉ l·∫•y c·∫•u tr√∫c c·ªôt) v√† test s·∫°ch
    print(f"ƒêang t·∫£i d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω t·ª´: {PROCESSED_DATA_DIR}")
    try:
        df_train_clean = pd.read_csv(train_clean_path)
        df_test_clean = pd.read_csv(test_clean_path)
    except FileNotFoundError:
        print(f"L·ªói: Kh√¥ng t√¨m th·∫•y file train_clean ho·∫∑c test_clean.")
        sys.exit(1)

    # 3. Chu·∫©n b·ªã X_test (ƒê·ªìng b·ªô c·ªôt v·ªõi X_train)
    print("   Chu·∫©n b·ªã d·ªØ li·ªáu X_test v√† ƒë·ªìng b·ªô c·ªôt...")
    try:
        X_train_cols = df_train_clean.drop(['SalePrice', 'Id'], axis=1).columns
        X_test_raw = df_test_clean.drop('Id', axis=1)
        X_test = X_test_raw.reindex(columns=X_train_cols, fill_value=0)
        print(f"   K√≠ch th∆∞·ªõc X_test sau khi ƒë·ªìng b·ªô: {X_test.shape}")
    except KeyError as e:
        print(f"L·ªói: C·ªôt {e} kh√¥ng t√¨m th·∫•y. Ki·ªÉm tra l·∫°i file _clean.csv.")
        sys.exit(1)
    except Exception as e:
        print(f"L·ªói khi chu·∫©n b·ªã X_test: {e}")
        sys.exit(1)


    # 4. Th·ª±c hi·ªán d·ª± ƒëo√°n
    print("ƒêang t·∫°o d·ª± ƒëo√°n tr√™n t·∫≠p test...")
    try:
        preds_test_log = model.predict(X_test)
    except Exception as e:
        print(f"L·ªói trong qu√° tr√¨nh d·ª± ƒëo√°n: {e}")
        sys.exit(1)


    # 5. Chuy·ªÉn ƒë·ªïi ng∆∞·ª£c k·∫øt qu·∫£ d·ª± ƒëo√°n
    print("   Chuy·ªÉn ƒë·ªïi d·ª± ƒëo√°n v·ªÅ gi√° tr·ªã g·ªëc...")
    preds_test_final = np.expm1(preds_test_log)

    # 6. T·∫°o file submission
    print(f"ƒêang t·∫£i file test g·ªëc ƒë·ªÉ l·∫•y Id t·ª´: {test_raw_path}")
    try:
        df_test_original = pd.read_csv(test_raw_path)
        print(f"ƒêang t·∫°o DataFrame submission...")
        submission = pd.DataFrame({
            'Id': df_test_original['Id'],
            'SalePrice': preds_test_final
        })
    except FileNotFoundError:
         print(f"L·ªói: Kh√¥ng t√¨m th·∫•y file test g·ªëc {test_raw_path}")
         sys.exit(1)
    except Exception as e:
        print(f"L·ªói khi t·∫°o submission DataFrame: {e}")
        sys.exit(1)

    # 7. L∆∞u file submission
    print(f"ƒêang l∆∞u file submission v√†o: {submission_path}")
    try:
        submission.to_csv(submission_path, index=False)
        print("File submission ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.")
    except Exception as e:
        print(f"L·ªói khi l∆∞u file submission: {e}")
        sys.exit(1)

    print("üèÅ Qu√° tr√¨nh t·∫°o d·ª± ƒëo√°n ho√†n t·∫•t.")
    return submission # Tr·∫£ v·ªÅ submission df n·∫øu c·∫ßn

# --- Ch·∫°y h√†m d·ª± ƒëo√°n khi script ƒë∆∞·ª£c th·ª±c thi ---
if __name__ == "__main__":
    submission_df = make_predictions(MODEL_PATH, TRAIN_CLEAN_PATH, TEST_CLEAN_PATH, TEST_RAW_PATH, SUBMISSION_PATH)