import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
import os
import sys

# --- ƒê·ªãnh nghƒ©a ƒë∆∞·ªùng d·∫´n ---
# Gi·∫£ ƒë·ªãnh script n√†y n·∫±m trong ProjectRoot/src/data/
# v√† d·ªØ li·ªáu n·∫±m trong ProjectRoot/data/
try:
    # L·∫•y ƒë∆∞·ªùng d·∫´n g·ªëc c·ªßa d·ª± √°n (ƒëi l√™n 2 c·∫•p t·ª´ v·ªã tr√≠ script)
    PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
except NameError:
    # X·ª≠ l√Ω n·∫øu ch·∫°y tr·ª±c ti·∫øp (v√≠ d·ª•: trong m√¥i tr∆∞·ªùng t∆∞∆°ng t√°c kh√¥ng c√≥ __file__)
    PROJECT_ROOT = os.path.abspath(os.path.join('.', '..', '..'))
    if not os.path.exists(os.path.join(PROJECT_ROOT, 'src', 'data')):
         # Th·ª≠ gi·∫£ ƒë·ªãnh ƒëang ch·∫°y t·ª´ th∆∞ m·ª•c g·ªëc
         PROJECT_ROOT = os.path.abspath('.')


RAW_DATA_DIR = os.path.join(PROJECT_ROOT, "data", "01_raw")
PROCESSED_DATA_DIR = os.path.join(PROJECT_ROOT, "data", "03_processed")

TRAIN_RAW_PATH = os.path.join(RAW_DATA_DIR, "train.csv")
TEST_RAW_PATH = os.path.join(RAW_DATA_DIR, "test.csv")

TRAIN_CLEAN_PATH = os.path.join(PROCESSED_DATA_DIR, "train_clean.csv")
TEST_CLEAN_PATH = os.path.join(PROCESSED_DATA_DIR, "test_clean.csv")

# --- H√†m x·ª≠ l√Ω ---

def load_data(train_path, test_path):
    """T·∫£i d·ªØ li·ªáu train v√† test th√¥."""
    print("ƒêang t·∫£i d·ªØ li·ªáu g·ªëc...")
    try:
        df_train = pd.read_csv(train_path)
        df_test = pd.read_csv(test_path)
        print(f"   Train shape: {df_train.shape}, Test shape: {df_test.shape}")
        return df_train, df_test
    except FileNotFoundError as e:
        print(f"L·ªói: Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu t·∫°i {e.filename}")
        print(f"   ƒê∆∞·ªùng d·∫´n d·ª± √°n ƒëang d√πng: {PROJECT_ROOT}")
        sys.exit(1) # Tho√°t script n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c d·ªØ li·ªáu

def fill_missing(df_train, df_test):
    """ƒêi·ªÅn c√°c gi√° tr·ªã thi·∫øu."""
    print("ƒêang ƒëi·ªÅn gi√° tr·ªã thi·∫øu...")
    # T·∫°o b·∫£n sao ƒë·ªÉ tr√°nh c·∫£nh b√°o SettingWithCopyWarning
    df_train_filled = df_train.copy()
    df_test_filled = df_test.copy()

    # ƒêi·ªÅn 'None' cho c√°c c·ªôt categorical c√≥ NA mang √Ω nghƒ©a "Kh√¥ng c√≥"
    cols_none = [
        'Alley', 'FireplaceQu', 'PoolQC', 'Fence', 'MiscFeature',
        'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond',
        'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'MasVnrType'
    ]
    df_train_filled[cols_none] = df_train_filled[cols_none].fillna('None')
    df_test_filled[cols_none] = df_test_filled[cols_none].fillna('None')

    # ƒêi·ªÅn 0 cho c√°c c·ªôt s·ªë c√≥ NA mang √Ω nghƒ©a "Kh√¥ng c√≥" ho·∫∑c gi√° tr·ªã 0
    for col in ['MasVnrArea', 'GarageYrBlt']:
        df_train_filled[col] = df_train_filled[col].fillna(0)
        df_test_filled[col] = df_test_filled[col].fillna(0)

    # ƒêi·ªÅn mode (ch·ªâ t√≠nh tr√™n train) cho Electrical
    electrical_mode = df_train_filled['Electrical'].mode()[0]
    df_train_filled['Electrical'] = df_train_filled['Electrical'].fillna(electrical_mode)
    df_test_filled['Electrical'] = df_test_filled['Electrical'].fillna(electrical_mode)

    # ƒêi·ªÅn median theo Neighborhood cho LotFrontage
    # T√≠nh median tr√™n train v√† √°p d·ª•ng cho c·∫£ train v√† test ƒë·ªÉ tr√°nh data leakage nh·∫π
    lotfrontage_median_map = df_train_filled.groupby('Neighborhood')['LotFrontage'].median()
    df_train_filled['LotFrontage'] = df_train_filled.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))
    # √Åp d·ª•ng map t·ª´ train cho test
    df_test_filled['LotFrontage'] = df_test_filled.apply(
        lambda row: row['LotFrontage'] if pd.notna(row['LotFrontage']) else lotfrontage_median_map.get(row['Neighborhood'], df_train_filled['LotFrontage'].median()),
        axis=1
    )
    # X·ª≠ l√Ω n·∫øu v·∫´n c√≤n NaN (v√≠ d·ª•: Neighborhood m·ªõi trong test ho·∫∑c c·∫£ khu v·ª±c l√† NaN)
    overall_median_train = df_train_filled['LotFrontage'].median()
    df_train_filled['LotFrontage'] = df_train_filled['LotFrontage'].fillna(overall_median_train)
    df_test_filled['LotFrontage'] = df_test_filled['LotFrontage'].fillna(overall_median_train)


    return df_train_filled, df_test_filled

def encode_and_align(df_train, df_test):
    """Th·ª±c hi·ªán One-hot encoding v√† ƒë·ªìng b·ªô c·ªôt."""
    print("üîÑ ƒêang th·ª±c hi·ªán One-hot encoding v√† ƒë·ªìng b·ªô c·ªôt...")
    # L∆∞u Id v√† SalePrice l·∫°i
    train_id = df_train['Id']
    test_id = df_test['Id']
    train_target = df_train['SalePrice']

    # B·ªè Id v√† SalePrice tr∆∞·ªõc khi encoding
    df_train_enc = df_train.drop(['Id', 'SalePrice'], axis=1)
    df_test_enc = df_test.drop('Id', axis=1)

    # One-hot encoding ri√™ng bi·ªát
    df_train_dummies = pd.get_dummies(df_train_enc, drop_first=True)
    df_test_dummies = pd.get_dummies(df_test_enc, drop_first=True)

    # ƒê·ªìng b·ªô c·ªôt test theo c·ªôt train
    train_cols = df_train_dummies.columns
    df_test_aligned = df_test_dummies.reindex(columns=train_cols, fill_value=0)

    # Th√™m Id v√† SalePrice l·∫°i
    df_train_aligned = df_train_dummies
    df_train_aligned['Id'] = train_id
    df_train_aligned['SalePrice'] = train_target # Th√™m l·∫°i SalePrice g·ªëc

    df_test_aligned['Id'] = test_id

    print(f"   Shapes sau encoding/ƒë·ªìng b·ªô: Train {df_train_aligned.shape}, Test {df_test_aligned.shape}")
    return df_train_aligned, df_test_aligned

def engineer_features(df):
    """T·∫°o c√°c ƒë·∫∑c tr∆∞ng m·ªõi."""
    print("ƒêang t·∫°o ƒë·∫∑c tr∆∞ng m·ªõi...")
    df_eng = df.copy() # T·∫°o b·∫£n sao
    # T√≠nh to√°n c√°c feature m·ªõi
    df_eng['TotalSF'] = df_eng['TotalBsmtSF'] + df_eng['1stFlrSF'] + df_eng['2ndFlrSF']
    df_eng['TotalBathrooms'] = (df_eng['FullBath'] + 0.5 * df_eng['HalfBath'] +
                                df_eng['BsmtFullBath'] + 0.5 * df_eng['BsmtHalfBath'])
    df_eng['Age'] = df_eng['YrSold'] - df_eng['YearBuilt']
    # ƒê·∫£m b·∫£o Age kh√¥ng √¢m
    df_eng['Age'] = df_eng['Age'].apply(lambda x: max(x, 0))
    return df_eng

def transform_target(df_train):
    """Log-transform c·ªôt SalePrice."""
    print("ƒêang log-transform SalePrice...")
    df_train_tf = df_train.copy()
    df_train_tf['SalePrice'] = np.log1p(df_train_tf['SalePrice'])
    return df_train_tf

def scale_features(df_train, df_test):
    """Chu·∫©n h√≥a c√°c ƒë·∫∑c tr∆∞ng s·ªë."""
    print("üîÑ ƒêang chu·∫©n h√≥a ƒë·∫∑c tr∆∞ng s·ªë...")
    df_train_sc = df_train.copy()
    df_test_sc = df_test.copy()

    # X√°c ƒë·ªãnh c√°c c·ªôt s·ªë (b·ªè Id v√† SalePrice)
    num_features = df_train_sc.select_dtypes(include=np.number).columns
    # errors='ignore' ph√≤ng tr∆∞·ªùng h·ª£p c·ªôt kh√¥ng t·ªìn t·∫°i
    num_features = num_features.drop(['Id', 'SalePrice'], errors='ignore')

    scaler = StandardScaler()

    # Fit scaler ch·ªâ tr√™n train v√† transform c·∫£ train v√† test
    df_train_sc[num_features] = scaler.fit_transform(df_train_sc[num_features])

    # ƒê·∫£m b·∫£o ch·ªâ transform c√°c c·ªôt s·ªë t·ªìn t·∫°i trong test
    num_features_in_test = [col for col in num_features if col in df_test_sc.columns]
    df_test_sc[num_features_in_test] = scaler.transform(df_test_sc[num_features_in_test])

    return df_train_sc, df_test_sc # Kh√¥ng c·∫ßn tr·∫£ v·ªÅ scaler n·∫øu kh√¥ng d√πng ·ªü ngo√†i

def save_data(df_train, df_test, train_path, test_path):
    """L∆∞u d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω."""
    print(f"ƒêang l∆∞u d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω v√†o {PROCESSED_DATA_DIR}...")
    os.makedirs(PROCESSED_DATA_DIR, exist_ok=True)
    df_train.to_csv(train_path, index=False)
    df_test.to_csv(test_path, index=False)
    print("L∆∞u d·ªØ li·ªáu th√†nh c√¥ng.")

def main():
    """H√†m ch√≠nh ch·∫°y to√†n b·ªô quy tr√¨nh x·ª≠ l√Ω d·ªØ li·ªáu."""
    print("B·∫Øt ƒë·∫ßu quy tr√¨nh x·ª≠ l√Ω d·ªØ li·ªáu...")

    # 1. T·∫£i d·ªØ li·ªáu
    df_train_raw, df_test_raw = load_data(TRAIN_RAW_PATH, TEST_RAW_PATH)

    # 2. ƒêi·ªÅn gi√° tr·ªã thi·∫øu
    df_train_filled, df_test_filled = fill_missing(df_train_raw, df_test_raw)

    # 3. One-hot encoding v√† ƒë·ªìng b·ªô c·ªôt
    df_train_enc, df_test_enc = encode_and_align(df_train_filled, df_test_filled)

    # 4. Feature Engineering
    df_train_eng = engineer_features(df_train_enc)
    df_test_eng = engineer_features(df_test_enc) # √Åp d·ª•ng t∆∞∆°ng t·ª± cho test

    # 5. Log-transform c·ªôt SalePrice (ch·ªâ train)
    df_train_tf = transform_target(df_train_eng)

    # 6. Chu·∫©n h√≥a ƒë·∫∑c tr∆∞ng s·ªë
    df_train_scaled, df_test_scaled = scale_features(df_train_tf, df_test_eng)

    # 7. L∆∞u k·∫øt qu·∫£
    save_data(df_train_scaled, df_test_scaled, TRAIN_CLEAN_PATH, TEST_CLEAN_PATH)

    print("üèÅ Quy tr√¨nh x·ª≠ l√Ω d·ªØ li·ªáu ho√†n t·∫•t.")

# --- Ch·∫°y h√†m main khi script ƒë∆∞·ª£c th·ª±c thi ---
if __name__ == "__main__":
    main()